var search_data = {"index":{"searchIndex":["ability","applicationcontroller","cancan","applicationhelper","blogrss","club","clubdecorator","clubscontroller","clubshelper","devisemailer","facebookapi","match","matchdecorator","matchescontroller","matcheshelper","membership","membershipscontroller","membershipshelper","motm","motmscontroller","motmshelper","pickem","pickemscontroller","pickemshelper","player","playerscontroller","playershelper","registrationscontroller","revguess","revguessescontroller","revguesseshelper","ridersblog","staticpagescontroller","cancan","staticpageshelper","stylesheetscontroller","stylesheetshelper","user","usermailer","haml","userscontroller","usershelper","<=>()","admin_controls()","articles()","auth_token()","available_roles()","club()","complete?()","configure_permitted_parameters()","contact()","create()","create()","create()","create()","create()","create()","create()","current_member?()","current_membership()","current_roles()","dark_compliment()","darken()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","draws()","edit()","edit()","edit()","edit()","edit()","edit()","edit()","errors_for()","events()","faq()","formatted_record()","get_articles()","get_auth_token()","get_contrast_yiq()","get_events()","get_hex()","gravatar()","home()","home()","import()","import()","import()","in()","in_future?()","in_past?()","inactive?()","incorrect?()","index()","index()","index()","index()","index()","index()","index()","is_revs_match()","last_match()","list_roles()","loser()","losses()","matches()","mot_m_button()","mot_m_for()","mot_m_path_for()","mot_m_total()","new()","new()","new()","new()","new()","new()","new()","new()","new_user_creation_email()","next()","next()","next_match()","next_matches()","parse_hex()","phone=()","pick_em_button()","pick_em_buttons()","pick_em_sub()","pick_for()","pick_result()","predicted_score()","previous()","previous()","previous_matches()","record()","refresh_auth_token()","result()","result()","rev_guess_button()","rev_guess_for()","rev_guess_path_for()","revs()","role?()","score()","score()","score()","show()","show()","show()","show()","show()","show()","standings()","teams()","text_search()","to_param()","to_s()","update()","update()","update()","update()","update()","update()","update()","update()","update_games()","url()","url()","vote()","voteable?()","winner()","wins()","wrong?()","readme"],"longSearchIndex":["ability","applicationcontroller","applicationcontroller::cancan","applicationhelper","blogrss","club","clubdecorator","clubscontroller","clubshelper","devisemailer","facebookapi","match","matchdecorator","matchescontroller","matcheshelper","membership","membershipscontroller","membershipshelper","motm","motmscontroller","motmshelper","pickem","pickemscontroller","pickemshelper","player","playerscontroller","playershelper","registrationscontroller","revguess","revguessescontroller","revguesseshelper","ridersblog","staticpagescontroller","staticpagescontroller::cancan","staticpageshelper","stylesheetscontroller","stylesheetshelper","user","usermailer","usermailer::haml","userscontroller","usershelper","player#<=>()","matchdecorator#admin_controls()","blogrss::articles()","facebookapi::auth_token()","membership#available_roles()","stylesheetscontroller#club()","match#complete?()","applicationcontroller#configure_permitted_parameters()","staticpagescontroller#contact()","clubscontroller#create()","matchescontroller#create()","membershipscontroller#create()","motmscontroller#create()","playerscontroller#create()","revguessescontroller#create()","userscontroller#create()","user#current_member?()","user#current_membership()","user#current_roles()","club#dark_compliment()","clubshelper#darken()","clubscontroller#destroy()","matchescontroller#destroy()","membershipscontroller#destroy()","motmscontroller#destroy()","pickemscontroller#destroy()","playerscontroller#destroy()","revguessescontroller#destroy()","club#draws()","clubscontroller#edit()","matchescontroller#edit()","membershipscontroller#edit()","motmscontroller#edit()","playerscontroller#edit()","revguessescontroller#edit()","userscontroller#edit()","applicationhelper#errors_for()","facebookapi::events()","staticpagescontroller#faq()","clubdecorator#formatted_record()","blogrss::get_articles()","facebookapi::get_auth_token()","clubshelper#get_contrast_yiq()","facebookapi::get_events()","clubshelper#get_hex()","user#gravatar()","staticpagescontroller#home()","userscontroller#home()","matchescontroller#import()","user::import()","userscontroller#import()","membershipscontroller#in()","match#in_future?()","match#in_past?()","player#inactive?()","pickem#incorrect?()","clubscontroller#index()","matchescontroller#index()","motmscontroller#index()","pickemscontroller#index()","playerscontroller#index()","revguessescontroller#index()","userscontroller#index()","revguess#is_revs_match()","club#last_match()","membership#list_roles()","match#loser()","club#losses()","club#matches()","matchdecorator#mot_m_button()","motmshelper#mot_m_for()","motmshelper#mot_m_path_for()","player#mot_m_total()","ability::new()","clubscontroller#new()","matchescontroller#new()","membershipscontroller#new()","motmscontroller#new()","playerscontroller#new()","revguessescontroller#new()","userscontroller#new()","usermailer#new_user_creation_email()","match#next()","match::next()","club#next_match()","club#next_matches()","clubshelper#parse_hex()","user#phone=()","matchdecorator#pick_em_button()","matchdecorator#pick_em_buttons()","matchdecorator#pick_em_sub()","user#pick_for()","user#pick_result()","revguess#predicted_score()","match#previous()","match::previous()","club#previous_matches()","club#record()","facebookapi::refresh_auth_token()","match#result()","revguess#result()","matchdecorator#rev_guess_button()","revguesseshelper#rev_guess_for()","revguesseshelper#rev_guess_path_for()","applicationhelper#revs()","user#role?()","match#score()","pickem::score()","revguess::score()","clubscontroller#show()","matchescontroller#show()","membershipscontroller#show()","playerscontroller#show()","revguessescontroller#show()","userscontroller#show()","staticpagescontroller#standings()","match#teams()","user::text_search()","user#to_param()","revguess#to_s()","clubscontroller#update()","matchescontroller#update()","membershipscontroller#update()","motmscontroller#update()","playerscontroller#update()","registrationscontroller#update()","revguessescontroller#update()","userscontroller#update()","match#update_games()","blogrss::url()","ridersblog::url()","pickemscontroller#vote()","match#voteable?()","match#winner()","club#wins()","pickem#wrong?()",""],"info":[["Ability","","Ability.html","","<p>Defines user abilities and permissions.\n"],["ApplicationController","","ApplicationController.html","","<p>Root controller for Application.\n"],["ApplicationController::CanCan","","ApplicationController/CanCan.html","",""],["ApplicationHelper","","ApplicationHelper.html","","<p>Application-wide helper module.\n"],["BlogRss","","BlogRss.html","","<p>Basic module to get blog articles from RSS URLs\n"],["Club","","Club.html","","<p>Schema Information\n<p>Table name: clubs\n\n<pre>id                 :integer          not null, primary key\nname   ...</pre>\n"],["ClubDecorator","","ClubDecorator.html","","<p>Decorator methods for <code>Club</code> model.\n"],["ClubsController","","ClubsController.html","","<p>Controller for <code>Club</code> model.\n"],["ClubsHelper","","ClubsHelper.html","","<p>Helper for <code>Club</code> model.\n"],["DeviseMailer","","DeviseMailer.html","","<p>Mailer for Devise user stuff.\n"],["FacebookApi","","FacebookApi.html","","<p>Module to interact with Facebook&#39;s Graph API\n"],["Match","","Match.html","","<p>Schema Information\n<p>Table name: matches\n\n<pre>id           :integer          not null, primary key\nhome_team_id ...</pre>\n"],["MatchDecorator","","MatchDecorator.html","","<p>Decorator methods for <code>Match</code> model.\n"],["MatchesController","","MatchesController.html","","<p>Controller for <code>Match</code> model.\n"],["MatchesHelper","","MatchesHelper.html","","<p>Helper for <code>Matche</code> model.\n"],["Membership","","Membership.html","","<p>Model belonging to <code>User</code> containing membership information for\na given year.\n<p>Schema Information\n<p>Table name: …\n"],["MembershipsController","","MembershipsController.html","","<p>Controller for <code>Membership</code> model.\n"],["MembershipsHelper","","MembershipsHelper.html","","<p>Helper for <code>Membership</code> model.\n"],["MotM","","MotM.html","","<p>Schema Information\n<p>Table name: mot_ms\n\n<pre>id         :integer          not null, primary key\nuser_id    :integer ...</pre>\n"],["MotMsController","","MotMsController.html","","<p>Controller for Man of the Match model, <code>MotM</code>.\n"],["MotMsHelper","","MotMsHelper.html","","<p>Helper for <code>MotM</code> model.\n"],["PickEm","","PickEm.html","","<p>Schema Information\n<p>Table name: pick_ems\n\n<pre>id         :integer          not null, primary key\nmatch_id   :integer ...</pre>\n"],["PickEmsController","","PickEmsController.html","","<p>Controller for <code>PickEm</code> model.\n"],["PickEmsHelper","","PickEmsHelper.html","","<p>Helper for <code>PickEm</code> model.\n"],["Player","","Player.html","","<p>Schema Information\n<p>Table name: players\n\n<pre>id         :integer          not null, primary key\nfirst_name :string(255) ...</pre>\n"],["PlayersController","","PlayersController.html","","<p>Controller for <code>Player</code> model.\n"],["PlayersHelper","","PlayersHelper.html","","<p>Helper for <code>Player</code> model.\n"],["RegistrationsController","","RegistrationsController.html","","<p>Controller for Devise Registrations.\n"],["RevGuess","","RevGuess.html","","<p>Schema Information\n<p>Table name: rev_guesses\n\n<pre>id         :integer          not null, primary key\nmatch_id ...</pre>\n"],["RevGuessesController","","RevGuessesController.html","","<p>Controller for <code>RevGuess</code> model.\n"],["RevGuessesHelper","","RevGuessesHelper.html","","<p>Helper for <code>RevGuesse</code> model.\n"],["RidersBlog","","RidersBlog.html","","<p>Extension of <code>BlogRss</code> for the Riders&#39; blog.\n"],["StaticPagesController","","StaticPagesController.html","","<p>Controller for static pages – home, faq, contact. Only visible\n"],["StaticPagesController::CanCan","","StaticPagesController/CanCan.html","",""],["StaticPagesHelper","","StaticPagesHelper.html","","<p>Helper for <code>StaticPage</code> model.\n"],["StylesheetsController","","StylesheetsController.html","","<p>Creates stylesheets based on information in the database.\n"],["StylesheetsHelper","","StylesheetsHelper.html","","<p>Helper for <code>Stylesheet</code> model.\n"],["User","","User.html","","<p>Schema Information\n<p>Table name: users\n\n<pre>id                     :integer          not null, primary key\nlast_name ...</pre>\n"],["UserMailer","","UserMailer.html","","<p>Mailer for user stuff not covered by Devise mailer.\n"],["UserMailer::Haml","","UserMailer/Haml.html","",""],["UsersController","","UsersController.html","","<p>Controller for <code>User</code> model.\n"],["UsersHelper","","UsersHelper.html","","<p>Helper for <code>User</code> model.\n"],["<=>","Player","Player.html#method-i-3C-3D-3E","(other)","<p>Rewrites sorting to default to position-based sorting, from GK to FW\n"],["admin_controls","MatchDecorator","MatchDecorator.html#method-i-admin_controls","()","<p>Returns buttons for editing/deleting a match\n"],["articles","BlogRss","BlogRss.html#method-c-articles","()","<p>Returns <strong>Array</strong> of articles. +@last_retrieved+ is used to\nmake sure articles are only requested every 15 …\n"],["auth_token","FacebookApi","FacebookApi.html#method-c-auth_token","()","<p>Sets and stores auth_token from API\n"],["available_roles","Membership","Membership.html#method-i-available_roles","()",""],["club","StylesheetsController","StylesheetsController.html#method-i-club","()","<p>Creates stylesheet based on <code>Club</code> records.\n"],["complete?","Match","Match.html#method-i-complete-3F","()","<p>Returns <strong>Boolean</strong>. Determined by presence of home and away\ngoals.\n"],["configure_permitted_parameters","ApplicationController","ApplicationController.html#method-i-configure_permitted_parameters","()","<p>Strong parameters for Devise.\n"],["contact","StaticPagesController","StaticPagesController.html#method-i-contact","()","<p>Basic contact information\n"],["create","ClubsController","ClubsController.html#method-i-create","()","<p>POST /clubs POST /clubs.json\n"],["create","MatchesController","MatchesController.html#method-i-create","()","<p>POST /matches POST /matches.json\n"],["create","MembershipsController","MembershipsController.html#method-i-create","()","<p>POST /users/:user_id/memberships POST /users/:user_id/memberships.json\n"],["create","MotMsController","MotMsController.html#method-i-create","()","<p>POST /mot_ms POST /mot_ms.json\n"],["create","PlayersController","PlayersController.html#method-i-create","()","<p>POST /players POST /players.json\n"],["create","RevGuessesController","RevGuessesController.html#method-i-create","()","<p>POST /rev_guesses POST /rev_guesses.json\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>POST /users POST /users.json\n"],["current_member?","User","User.html#method-i-current_member-3F","()","<p>Returns <strong>Boolean</strong>. Determines whether user has a current\nmembership.\n"],["current_membership","User","User.html#method-i-current_membership","()","<p>Returns <code>Membership</code> for current year.\n"],["current_roles","User","User.html#method-i-current_roles","()","<p>Returns <code>roles</code> from current <code>Membership</code>\n"],["dark_compliment","Club","Club.html#method-i-dark_compliment","()","<p>Returns <strong>String</strong>. Color method that falls back to\n<code>accent_color</code> if <code>secondary_color</code> is white.\n"],["darken","ClubsHelper","ClubsHelper.html#method-i-darken","(hexcolor, amount = 0.5)","<p>Returns hex darkened by <code>amount</code>\n"],["destroy","ClubsController","ClubsController.html#method-i-destroy","()","<p>DELETE /clubs/1 DELETE /clubs/1.json\n"],["destroy","MatchesController","MatchesController.html#method-i-destroy","()","<p>DELETE /matches/1 DELETE /matches/1.json\n"],["destroy","MembershipsController","MembershipsController.html#method-i-destroy","()","<p>DELETE /users/:user_id/memberships/1 DELETE\n/users/:user_id/memberships/1.json\n"],["destroy","MotMsController","MotMsController.html#method-i-destroy","()","<p>DELETE /mot_ms/1 DELETE /mot_ms/1.json\n"],["destroy","PickEmsController","PickEmsController.html#method-i-destroy","()","<p>DELETE /pick_ems/1 DELETE /pick_ems/1.json\n"],["destroy","PlayersController","PlayersController.html#method-i-destroy","()","<p>DELETE /players/1 DELETE /players/1.json\n"],["destroy","RevGuessesController","RevGuessesController.html#method-i-destroy","()","<p>DELETE /rev_guesses/1 DELETE /rev_guesses/1.json\n"],["draws","Club","Club.html#method-i-draws","()","<p>Returns <strong>Array</strong> of <code>Matches</code> that the club has\ndrawn.\n"],["edit","ClubsController","ClubsController.html#method-i-edit","()","<p>GET /clubs/1/edit\n"],["edit","MatchesController","MatchesController.html#method-i-edit","()","<p>GET /matches/1/edit\n"],["edit","MembershipsController","MembershipsController.html#method-i-edit","()","<p>GET /users/:user_id/memberships/1/edit\n"],["edit","MotMsController","MotMsController.html#method-i-edit","()","<p>GET /mot_ms/1/edit\n"],["edit","PlayersController","PlayersController.html#method-i-edit","()","<p>GET /players/1/edit\n"],["edit","RevGuessesController","RevGuessesController.html#method-i-edit","()","<p>GET /rev_guesses/1/edit\n"],["edit","UsersController","UsersController.html#method-i-edit","()","<p>GET /users/1/edit\n"],["errors_for","ApplicationHelper","ApplicationHelper.html#method-i-errors_for","(object, method)","<p>Outputs a +&lt;small/&gt;+ with errors if errors are present on the object\n"],["events","FacebookApi","FacebookApi.html#method-c-events","()","<p>Returns <strong>Array</strong>. Events from the Riders Page.\n"],["faq","StaticPagesController","StaticPagesController.html#method-i-faq","()","<p>Frequently Asked Questions\n"],["formatted_record","ClubDecorator","ClubDecorator.html#method-i-formatted_record","(link = true)","<p>Formats <code>record</code> as span or link, with Title of &#39;W-L-D&#39;\n"],["get_articles","BlogRss","BlogRss.html#method-c-get_articles","()","<p>Retrieves articles from url.\n"],["get_auth_token","FacebookApi","FacebookApi.html#method-c-get_auth_token","()","<p>Retrieves auth_token from API\n"],["get_contrast_yiq","ClubsHelper","ClubsHelper.html#method-i-get_contrast_yiq","(hexcolor)","<p>Returns string - dark gray or white, depending on the YIQ\n"],["get_events","FacebookApi","FacebookApi.html#method-c-get_events","()","<p>Retrieves events from API\n"],["get_hex","ClubsHelper","ClubsHelper.html#method-i-get_hex","(x)","<p>Returns 2-digit hex string from base-10 integer.\n"],["gravatar","User","User.html#method-i-gravatar","()","<p>Returns <strong>String</strong>. URL for Gravatar based on email.\n"],["home","StaticPagesController","StaticPagesController.html#method-i-home","()","<p>Root path. Shows sign_in if not signed in, user_home if signed in\n"],["home","UsersController","UsersController.html#method-i-home","()","<p>GET /home\n"],["import","MatchesController","MatchesController.html#method-i-import","()","<p>Imports matches from MLS Calendar.\n"],["import","User","User.html#method-c-import","(file, roles = [])","<p>User import script. Needs work.\n"],["import","UsersController","UsersController.html#method-i-import","()","<p>POST /users/import Accepts <code>:file</code> to import new\n<code>Users</code>.\n"],["in","MembershipsController","MembershipsController.html#method-i-in","()","<p>GET /users/:user_id/memberships GET /users/:user_id/memberships.json\n"],["in_future?","Match","Match.html#method-i-in_future-3F","()","<p>Returns <strong>Boolean</strong>. Shortcut to test if <code>kickoff</code>\nis in the future, if it exists.\n"],["in_past?","Match","Match.html#method-i-in_past-3F","()","<p>Returns <strong>Boolean</strong>. Not <code>in_future?</code>.\n"],["inactive?","Player","Player.html#method-i-inactive-3F","()","<p>Returns <strong>Boolean</strong>. Alias for <code>!active?</code>.\n"],["incorrect?","PickEm","PickEm.html#method-i-incorrect-3F","()","<p>Returns <strong>Boolean</strong>. Verifies that the <code>correct</code>\nexists and is <code>false</code>\n"],["index","ClubsController","ClubsController.html#method-i-index","()","<p>GET /clubs GET /clubs.json\n"],["index","MatchesController","MatchesController.html#method-i-index","()","<p>GET /matches GET /matches.json\n"],["index","MotMsController","MotMsController.html#method-i-index","()","<p>GET /mot_ms GET /mot_ms.json\n"],["index","PickEmsController","PickEmsController.html#method-i-index","()","<p>GET /pick_ems GET /pick_ems.json\n"],["index","PlayersController","PlayersController.html#method-i-index","()","<p>GET /players GET /players.json\n"],["index","RevGuessesController","RevGuessesController.html#method-i-index","()","<p>GET /rev_guesses GET /rev_guesses.json\n"],["index","UsersController","UsersController.html#method-i-index","()","<p>GET /users GET /users.json\n"],["is_revs_match","RevGuess","RevGuess.html#method-i-is_revs_match","()","<p>Validates that one of the teams is the Revs.\n"],["last_match","Club","Club.html#method-i-last_match","()","<p>Alias for <code>previous_matches(1)</code>\n"],["list_roles","Membership","Membership.html#method-i-list_roles","(verbose=false)","<p>Returns <strong>String</strong>. Lists all roles, comma-separated or in\nplain english if <code>verbose</code> is true.\n"],["loser","Match","Match.html#method-i-loser","()","<p>Returns <code>Club</code> or <code>nil</code>. Losing team if present.\n"],["losses","Club","Club.html#method-i-losses","()","<p>Returns <strong>Array</strong> of <code>Matches</code> that the club has\nlost.\n"],["matches","Club","Club.html#method-i-matches","()","<p>Returns <strong>Array</strong> of <code>Matches</code> involving the club.\n"],["mot_m_button","MatchDecorator","MatchDecorator.html#method-i-mot_m_button","(size='tiny', o = false)","<p>Returns <code>a.button.secondary</code> for <code>MotM</code> for given\nmatch. <code>size</code> defaults to &#39;tiny&#39;. If <code>o</code> (for\nopponent) …\n"],["mot_m_for","MotMsHelper","MotMsHelper.html#method-i-mot_m_for","(match)","<p>Returns <code>MotM</code> for <code>match</code> for current user.\n"],["mot_m_path_for","MotMsHelper","MotMsHelper.html#method-i-mot_m_path_for","(match)","<p>Returns path for <code>MotM</code> form: new if it doesn&#39;t already\nexist, edit if it does.\n"],["mot_m_total","Player","Player.html#method-i-mot_m_total","(match_id = nil)","<p>Returns <strong>Integer</strong>. Scores Man of the Match voting for a\nplayer. If no <code>match_id</code> is provided, returns total …\n"],["new","Ability","Ability.html#method-c-new","(user)","<p>Define abilities for the passed in user here. For example:\n\n<pre>if user.admin?\n  can :manage, :all\nelse\n  can ...</pre>\n"],["new","ClubsController","ClubsController.html#method-i-new","()","<p>GET /clubs/new\n"],["new","MatchesController","MatchesController.html#method-i-new","()","<p>GET /matches/new\n"],["new","MembershipsController","MembershipsController.html#method-i-new","()","<p>GET /users/:user_id/memberships/new\n"],["new","MotMsController","MotMsController.html#method-i-new","()","<p>GET /mot_ms/new\n"],["new","PlayersController","PlayersController.html#method-i-new","()","<p>GET /players/new\n"],["new","RevGuessesController","RevGuessesController.html#method-i-new","()","<p>GET /rev_guesses/new\n"],["new","UsersController","UsersController.html#method-i-new","()","<p>GET /users/new\n"],["new_user_creation_email","UserMailer","UserMailer.html#method-i-new_user_creation_email","(user, temp_pass)","<p>Email generated by user import script to notify a new user that their\naccount has been created and give …\n"],["next","Match","Match.html#method-i-next","()","<p>Returns <code>Match</code>. Retrieves match immediately after the given\nmatch.\n"],["next","Match","Match.html#method-c-next","(n=1)","<p>If n is 1 (default), returns <code>Match</code>. Otherwise, returns\n<strong>Array</strong> of <code>Matches</code>. Retrieves next\n<code>n</code> matches from …\n"],["next_match","Club","Club.html#method-i-next_match","()","<p>Alias for <code>next_matches(1)</code>\n"],["next_matches","Club","Club.html#method-i-next_matches","(n=1,time=Time.current)","<p>Returns <code>Match</code> or <strong>Array</strong> of\n<code>Matches</code>, depending on <code>n</code>, after <code>time</code>\n(defaults to now).\n"],["parse_hex","ClubsHelper","ClubsHelper.html#method-i-parse_hex","(hexcolor)","<p>Returns RGB hash from hex\n"],["phone=","User","User.html#method-i-phone-3D","(value)","<p>Converts the phone to <strong>Integer</strong> for storage.\n"],["pick_em_button","MatchDecorator","MatchDecorator.html#method-i-pick_em_button","(pick, *args)","<p>Returns individual <code>PickEm</code> links.\n<p>options:\n\n<pre> +:user+ defaults to current_user. Not sure when it wouldn&#39;t ...</pre>\n"],["pick_em_buttons","MatchDecorator","MatchDecorator.html#method-i-pick_em_buttons","(*args)","<p>Returns formatted set of links for <code>PickEm</code>.\n"],["pick_em_sub","MatchDecorator","MatchDecorator.html#method-i-pick_em_sub","()","<p>Returns formatted info that goes below the PickEm buttons - team records\nand optional admin controls. …\n"],["pick_for","User","User.html#method-i-pick_for","(match)","<p>Returns <code>PickEm</code> for given <code>match</code>, or new\n<code>PickEm</code>.\n"],["pick_result","User","User.html#method-i-pick_result","(match)","<p>Returns <strong>String</strong>. Either picked result, or <code>nil</code>.\n"],["predicted_score","RevGuess","RevGuess.html#method-i-predicted_score","()","<p>Returns <strong>String</strong> or <code>nil</code>. Formatted &#39;Home –\nAway&#39;.\n"],["previous","Match","Match.html#method-i-previous","()","<p>Returns <code>Match</code>. Retrieves match immediately before the given\nmatch.\n"],["previous","Match","Match.html#method-c-previous","(n=1)","<p>If n is 1 (default), returns <code>Match</code>. Otherwise, returns\n<strong>Array</strong> of <code>Matches</code>. Retrieves previous\n<code>n</code> matches …\n"],["previous_matches","Club","Club.html#method-i-previous_matches","(n=1,time=Time.current)","<p>Returns <code>Match</code> or <strong>Array</strong> of\n<code>Matches</code>, depending on <code>n</code>, before <code>time</code>\n(defaults to now).\n"],["record","Club","Club.html#method-i-record","()","<p>Returns <strong>String</strong> in format of “W-L-D”.\n"],["refresh_auth_token","FacebookApi","FacebookApi.html#method-c-refresh_auth_token","()","<p>Sets auth_token\n"],["result","Match","Match.html#method-i-result","()","<p>Returns <strong>Symbol</strong> or <code>nil</code>: <code>:home</code>,\n<code>:away</code>, or <code>:draw</code>\n"],["result","RevGuess","RevGuess.html#method-i-result","()","<p>Returns <strong>Symbol</strong> or <code>nil</code>: <code>:home</code>,\n<code>:away</code>, or <code>:draw</code>.\n"],["rev_guess_button","MatchDecorator","MatchDecorator.html#method-i-rev_guess_button","(size='tiny', o = false)","<p>Returns <code>a.button.secondary</code> for <code>RevGuess</code> for given\nmatch. <code>size</code> defaults to &#39;tiny&#39;. If <code>o</code> (for\nopponent) …\n"],["rev_guess_for","RevGuessesHelper","RevGuessesHelper.html#method-i-rev_guess_for","(match)","<p>Returns <code>RevGuess</code> for given <code>match</code> for the current\nuser.\n"],["rev_guess_path_for","RevGuessesHelper","RevGuessesHelper.html#method-i-rev_guess_path_for","(match)","<p>Returns <code>RevGuess</code> path for given <code>match</code> for the\ncurrent user: new_match_rev_guess_path if one doesn&#39;t …\n"],["revs","ApplicationHelper","ApplicationHelper.html#method-i-revs","()","<p>Returns *ActiveRecord Object* for the Revolution.\n"],["role?","User","User.html#method-i-role-3F","(r)","<p>Returns <strong>Boolean</strong>. Determines whether the user has a given\nrole.\n"],["score","Match","Match.html#method-i-score","()","<p>Returns <strong>String</strong>: &#39;home – away&#39; or &#39;–&#39; if\nnot <code>complete?</code>.\n"],["score","PickEm","PickEm.html#method-c-score","()","<p>Returns <strong>Integer</strong>\n"],["score","RevGuess","RevGuess.html#method-c-score","()","<p>Returns <strong>Integer</strong>\n"],["show","ClubsController","ClubsController.html#method-i-show","()","<p>GET /clubs/1 GET /clubs/1.json\n"],["show","MatchesController","MatchesController.html#method-i-show","()","<p>GET /matches/1 GET /matches/1.json\n"],["show","MembershipsController","MembershipsController.html#method-i-show","()","<p>GET /users/:user_id/memberships/1 GET /users/:user_id/memberships/1.json\n"],["show","PlayersController","PlayersController.html#method-i-show","()","<p>GET /players/1 GET /players/1.json\n"],["show","RevGuessesController","RevGuessesController.html#method-i-show","()","<p>GET /rev_guesses/1 GET /rev_guesses/1.json\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>GET /users/1 GET /users/1.json\n"],["standings","StaticPagesController","StaticPagesController.html#method-i-standings","()","<p>Shows standings for Pick &#39;Em and RevGuess.\n"],["teams","Match","Match.html#method-i-teams","()","<p>Returns <strong>Array</strong> with both teams: <code>[ home_team,\naway_team ]</code>\n"],["text_search","User","User.html#method-c-text_search","(query)","<p>Quick semi-full-text search for Users.\n"],["to_param","User","User.html#method-i-to_param","()","<p>Used in generating readable URLs.\n"],["to_s","RevGuess","RevGuess.html#method-i-to_s","()","<p>Returns <strong>String</strong>. Provides predicted score, if available.\nOtherwise string is empty.\n"],["update","ClubsController","ClubsController.html#method-i-update","()","<p>PATCH/PUT /clubs/1 PATCH/PUT /clubs/1.json\n"],["update","MatchesController","MatchesController.html#method-i-update","()","<p>PATCH/PUT /matches/1 PATCH/PUT /matches/1.json\n"],["update","MembershipsController","MembershipsController.html#method-i-update","()","<p>PATCH/PUT /users/:user_id/memberships/1 PATCH/PUT\n/users/:user_id/memberships/1.json\n"],["update","MotMsController","MotMsController.html#method-i-update","()","<p>PATCH/PUT /mot_ms/1 PATCH/PUT /mot_ms/1.json\n"],["update","PlayersController","PlayersController.html#method-i-update","()","<p>PATCH/PUT /players/1 PATCH/PUT /players/1.json\n"],["update","RegistrationsController","RegistrationsController.html#method-i-update","()","<p>Supercedes Devise <code>update</code> method to allow editing of other\nusers if admin.\n"],["update","RevGuessesController","RevGuessesController.html#method-i-update","()","<p>PATCH/PUT /rev_guesses/1 PATCH/PUT /rev_guesses/1.json\n"],["update","UsersController","UsersController.html#method-i-update","()","<p>PATCH/PUT /users/1 PATCH/PUT /users/1.json\n"],["update_games","Match","Match.html#method-i-update_games","()","<p>Updates the picking games on save so that they don&#39;t have to pull in\n<code>Match</code> data any and every time …\n"],["url","BlogRss","BlogRss.html#method-c-url","()","<p>No URL for the base module.\n"],["url","RidersBlog","RidersBlog.html#method-c-url","()","<p>Hard-coded URL.\n"],["vote","PickEmsController","PickEmsController.html#method-i-vote","()","<p>POST /matches/:match_id/pickem/vote Updates or creates <code>PickEm</code>\nfor match from given user.\n"],["voteable?","Match","Match.html#method-i-voteable-3F","()","<p>Returns <strong>Boolean</strong>. Tests if <code>kickoff</code> was 45\nminutes in the past, teams include New England (used for <code>MotM</code>\n…\n"],["winner","Match","Match.html#method-i-winner","()","<p>Returns <code>Club</code> or <code>nil</code>. Winning team if present.\n"],["wins","Club","Club.html#method-i-wins","()","<p>Returns <strong>Array</strong> of <code>Matches</code> that the club has\nwon.\n"],["wrong?","PickEm","PickEm.html#method-i-wrong-3F","()","<p>Returns <strong>Boolean</strong>. Alias for <code>incorrect?</code>.\n"],["README","","README_rdoc.html","","<p>Midnight Riders Member Portal\n<p>The Midnight Riders Member Portal is a membership database for current  …\n"]]}}