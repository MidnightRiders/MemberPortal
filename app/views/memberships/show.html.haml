.row
  .large-4.columns
    %h4.subheader
      #{@membership.user.first_name} #{@membership.user.last_name}’s
    %h3
      = @membership.year
      Membership
      = content_tag :small, 'Canceled', class: 'alert' if @membership.refunded
  .large-8.columns
    .row
      .medium-4.columns
        %label
          Membership Type
      .medium-8.columns
        %p
          = @membership.type
          - if @membership.is_a? Relative
            (#{link_to "#{@membership.family.user.first_name} #{@membership.family.user.last_name}", @membership.family.user}’s Family)
    - unless @membership.is_a? Relative
      .row
        .medium-4.columns
          %label Payment
        .medium-8.columns
          %p
            %strong= number_to_currency @membership.cost
      .row
        .medium-4.columns
          %label Payment Method
        .medium-8.columns
          - if @card
            %p
              XXXX XXXX XXXX
              = @card.last4
              %br
              Expires:
              #{@card.exp_month}/#{@card.exp_year}
          - else
            %p Paid in person
      - if @card
        .row
          .medium-4.columns
            Auto-Renew
          .medium-8.columns
            - if @membership.stripe_subscription_id.nil?
              %strong Off
            - else
              %strong On
              (next charge: #{(Date.current + 1.year).beginning_of_year.strftime('%-m/%-d/%Y')})
              = link_to 'cancel', cancel_user_membership_path(@user, @membership), data: { method: :patch, confirm: 'Are you sure you wish to cancel automatic renewal?' }
    - if @membership.can_have_relatives?
      %hr
      .row
        .medium-4.columns
          Family Members
        .medium-8.columns
          %ul
            - if @membership.relatives.empty?
              %li None
            - @membership.relatives.each do |relative|
              %li
                - if relative.pending_approval?
                  = relative.invited_email
                  [Pending]
                - elsif relative.is_a? Family
                  %strong= link_to "#{relative.user.first_name} #{relative.user.last_name} (#{relative.user.username})", relative.user
                - else
                  = link_to "#{relative.user.first_name} #{relative.user.last_name} (#{relative.user.username})", relative.user
                - if can? :manage, relative
                  (#{link_to 'Remove', user_membership_relative_path(@user, @membership, relative), data: { method: :delete, confirm: "Are you sure you wish to remove #{relative.pending_approval? ? relative.invited_email : relative.user.first_name} from your Family membership?" } })
          - if @membership.is_a? Family
            = link_to new_user_membership_relative_path(@membership.user, @membership), class: 'button small expand' do
              = icon 'plus fa-fw'
              Add Relative


