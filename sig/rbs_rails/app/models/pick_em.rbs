class PickEm < ActiveRecord::Base
  extend _ActiveRecord_Relation_ClassMethods[PickEm, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor match_id(): Integer?
  def match_id_changed?: () -> bool
  def match_id_change: () -> [ Integer?, Integer? ]
  def match_id_will_change!: () -> void
  def match_id_was: () -> Integer?
  def match_id_previously_changed?: () -> bool
  def match_id_previous_change: () -> Array[Integer?]?
  def match_id_previously_was: () -> Integer?
  def match_id_before_last_save: () -> Integer?
  def match_id_change_to_be_saved: () -> Array[Integer?]?
  def match_id_in_database: () -> Integer?
  def saved_change_to_match_id: () -> Array[Integer?]?
  def saved_change_to_match_id?: () -> bool
  def will_save_change_to_match_id?: () -> bool
  def restore_match_id!: () -> void
  def clear_match_id_change: () -> void

  attr_accessor user_id(): Integer?
  def user_id_changed?: () -> bool
  def user_id_change: () -> [ Integer?, Integer? ]
  def user_id_will_change!: () -> void
  def user_id_was: () -> Integer?
  def user_id_previously_changed?: () -> bool
  def user_id_previous_change: () -> Array[Integer?]?
  def user_id_previously_was: () -> Integer?
  def user_id_before_last_save: () -> Integer?
  def user_id_change_to_be_saved: () -> Array[Integer?]?
  def user_id_in_database: () -> Integer?
  def saved_change_to_user_id: () -> Array[Integer?]?
  def saved_change_to_user_id?: () -> bool
  def will_save_change_to_user_id?: () -> bool
  def restore_user_id!: () -> void
  def clear_user_id_change: () -> void

  attr_accessor result(): Integer?
  def result_changed?: () -> bool
  def result_change: () -> [ Integer?, Integer? ]
  def result_will_change!: () -> void
  def result_was: () -> Integer?
  def result_previously_changed?: () -> bool
  def result_previous_change: () -> Array[Integer?]?
  def result_previously_was: () -> Integer?
  def result_before_last_save: () -> Integer?
  def result_change_to_be_saved: () -> Array[Integer?]?
  def result_in_database: () -> Integer?
  def saved_change_to_result: () -> Array[Integer?]?
  def saved_change_to_result?: () -> bool
  def will_save_change_to_result?: () -> bool
  def restore_result!: () -> void
  def clear_result_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone?
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone?
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor correct(): bool?
  def correct_changed?: () -> bool
  def correct_change: () -> [ bool?, bool? ]
  def correct_will_change!: () -> void
  def correct_was: () -> bool?
  def correct_previously_changed?: () -> bool
  def correct_previous_change: () -> Array[bool?]?
  def correct_previously_was: () -> bool?
  def correct_before_last_save: () -> bool?
  def correct_change_to_be_saved: () -> Array[bool?]?
  def correct_in_database: () -> bool?
  def saved_change_to_correct: () -> Array[bool?]?
  def saved_change_to_correct?: () -> bool
  def will_save_change_to_correct?: () -> bool
  def restore_correct!: () -> void
  def clear_correct_change: () -> void
  attr_accessor correct?(): bool

  def match: () -> Match
  def match=: (Match?) -> Match?
  def reload_match: () -> Match?
  def build_match: (untyped) -> Match
  def create_match: (untyped) -> Match
  def create_match!: (untyped) -> Match
  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PickEm, Integer]
    include Enumerable[PickEm]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PickEm, Integer]
  end
end
