class Player < ActiveRecord::Base
  extend _ActiveRecord_Relation_ClassMethods[Player, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor first_name(): String?
  def first_name_changed?: () -> bool
  def first_name_change: () -> [ String?, String? ]
  def first_name_will_change!: () -> void
  def first_name_was: () -> String?
  def first_name_previously_changed?: () -> bool
  def first_name_previous_change: () -> Array[String?]?
  def first_name_previously_was: () -> String?
  def first_name_before_last_save: () -> String?
  def first_name_change_to_be_saved: () -> Array[String?]?
  def first_name_in_database: () -> String?
  def saved_change_to_first_name: () -> Array[String?]?
  def saved_change_to_first_name?: () -> bool
  def will_save_change_to_first_name?: () -> bool
  def restore_first_name!: () -> void
  def clear_first_name_change: () -> void

  attr_accessor last_name(): String?
  def last_name_changed?: () -> bool
  def last_name_change: () -> [ String?, String? ]
  def last_name_will_change!: () -> void
  def last_name_was: () -> String?
  def last_name_previously_changed?: () -> bool
  def last_name_previous_change: () -> Array[String?]?
  def last_name_previously_was: () -> String?
  def last_name_before_last_save: () -> String?
  def last_name_change_to_be_saved: () -> Array[String?]?
  def last_name_in_database: () -> String?
  def saved_change_to_last_name: () -> Array[String?]?
  def saved_change_to_last_name?: () -> bool
  def will_save_change_to_last_name?: () -> bool
  def restore_last_name!: () -> void
  def clear_last_name_change: () -> void

  attr_accessor club_id(): Integer?
  def club_id_changed?: () -> bool
  def club_id_change: () -> [ Integer?, Integer? ]
  def club_id_will_change!: () -> void
  def club_id_was: () -> Integer?
  def club_id_previously_changed?: () -> bool
  def club_id_previous_change: () -> Array[Integer?]?
  def club_id_previously_was: () -> Integer?
  def club_id_before_last_save: () -> Integer?
  def club_id_change_to_be_saved: () -> Array[Integer?]?
  def club_id_in_database: () -> Integer?
  def saved_change_to_club_id: () -> Array[Integer?]?
  def saved_change_to_club_id?: () -> bool
  def will_save_change_to_club_id?: () -> bool
  def restore_club_id!: () -> void
  def clear_club_id_change: () -> void

  attr_accessor position(): String?
  def position_changed?: () -> bool
  def position_change: () -> [ String?, String? ]
  def position_will_change!: () -> void
  def position_was: () -> String?
  def position_previously_changed?: () -> bool
  def position_previous_change: () -> Array[String?]?
  def position_previously_was: () -> String?
  def position_before_last_save: () -> String?
  def position_change_to_be_saved: () -> Array[String?]?
  def position_in_database: () -> String?
  def saved_change_to_position: () -> Array[String?]?
  def saved_change_to_position?: () -> bool
  def will_save_change_to_position?: () -> bool
  def restore_position!: () -> void
  def clear_position_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone?
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone?
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  attr_accessor number(): Integer?
  def number_changed?: () -> bool
  def number_change: () -> [ Integer?, Integer? ]
  def number_will_change!: () -> void
  def number_was: () -> Integer?
  def number_previously_changed?: () -> bool
  def number_previous_change: () -> Array[Integer?]?
  def number_previously_was: () -> Integer?
  def number_before_last_save: () -> Integer?
  def number_change_to_be_saved: () -> Array[Integer?]?
  def number_in_database: () -> Integer?
  def saved_change_to_number: () -> Array[Integer?]?
  def saved_change_to_number?: () -> bool
  def will_save_change_to_number?: () -> bool
  def restore_number!: () -> void
  def clear_number_change: () -> void

  attr_accessor active(): bool?
  def active_changed?: () -> bool
  def active_change: () -> [ bool?, bool? ]
  def active_will_change!: () -> void
  def active_was: () -> bool?
  def active_previously_changed?: () -> bool
  def active_previous_change: () -> Array[bool?]?
  def active_previously_was: () -> bool?
  def active_before_last_save: () -> bool?
  def active_change_to_be_saved: () -> Array[bool?]?
  def active_in_database: () -> bool?
  def saved_change_to_active: () -> Array[bool?]?
  def saved_change_to_active?: () -> bool
  def will_save_change_to_active?: () -> bool
  def restore_active!: () -> void
  def clear_active_change: () -> void
  attr_accessor active?(): bool

  def mot_m_firsts: () -> MotM::ActiveRecord_Associations_CollectionProxy
  def mot_m_firsts=: (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM]) -> (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM])
  def mot_m_first_ids: () -> Array[Integer]
  def mot_m_first_ids=: (Array[Integer]) -> Array[Integer]
  def mot_m_seconds: () -> MotM::ActiveRecord_Associations_CollectionProxy
  def mot_m_seconds=: (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM]) -> (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM])
  def mot_m_second_ids: () -> Array[Integer]
  def mot_m_second_ids=: (Array[Integer]) -> Array[Integer]
  def mot_m_thirds: () -> MotM::ActiveRecord_Associations_CollectionProxy
  def mot_m_thirds=: (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM]) -> (MotM::ActiveRecord_Associations_CollectionProxy | Array[MotM])
  def mot_m_third_ids: () -> Array[Integer]
  def mot_m_third_ids=: (Array[Integer]) -> Array[Integer]

  def club: () -> Club
  def club=: (Club?) -> Club?
  def reload_club: () -> Club?
  def build_club: (untyped) -> Club
  def create_club: (untyped) -> Club
  def create_club!: (untyped) -> Club

  def self.active: () -> ActiveRecord_Relation
  def self.inactive: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def active: () -> ActiveRecord_Relation

    def inactive: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Player, Integer]
    include Enumerable[Player]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Player, Integer]
  end
end
