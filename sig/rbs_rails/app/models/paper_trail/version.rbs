module PaperTrail
  class Version < ActiveRecord::Base
    extend _ActiveRecord_Relation_ClassMethods[PaperTrail::Version, ActiveRecord_Relation, Integer]

    attr_accessor id(): Integer
    def id_changed?: () -> bool
    def id_change: () -> [ Integer?, Integer? ]
    def id_will_change!: () -> void
    def id_was: () -> Integer?
    def id_previously_changed?: () -> bool
    def id_previous_change: () -> Array[Integer?]?
    def id_previously_was: () -> Integer?
    def id_before_last_save: () -> Integer?
    def id_change_to_be_saved: () -> Array[Integer?]?
    def id_in_database: () -> Integer?
    def saved_change_to_id: () -> Array[Integer?]?
    def saved_change_to_id?: () -> bool
    def will_save_change_to_id?: () -> bool
    def restore_id!: () -> void
    def clear_id_change: () -> void

    attr_accessor item_type(): String
    def item_type_changed?: () -> bool
    def item_type_change: () -> [ String?, String? ]
    def item_type_will_change!: () -> void
    def item_type_was: () -> String?
    def item_type_previously_changed?: () -> bool
    def item_type_previous_change: () -> Array[String?]?
    def item_type_previously_was: () -> String?
    def item_type_before_last_save: () -> String?
    def item_type_change_to_be_saved: () -> Array[String?]?
    def item_type_in_database: () -> String?
    def saved_change_to_item_type: () -> Array[String?]?
    def saved_change_to_item_type?: () -> bool
    def will_save_change_to_item_type?: () -> bool
    def restore_item_type!: () -> void
    def clear_item_type_change: () -> void

    attr_accessor item_id(): Integer
    def item_id_changed?: () -> bool
    def item_id_change: () -> [ Integer?, Integer? ]
    def item_id_will_change!: () -> void
    def item_id_was: () -> Integer?
    def item_id_previously_changed?: () -> bool
    def item_id_previous_change: () -> Array[Integer?]?
    def item_id_previously_was: () -> Integer?
    def item_id_before_last_save: () -> Integer?
    def item_id_change_to_be_saved: () -> Array[Integer?]?
    def item_id_in_database: () -> Integer?
    def saved_change_to_item_id: () -> Array[Integer?]?
    def saved_change_to_item_id?: () -> bool
    def will_save_change_to_item_id?: () -> bool
    def restore_item_id!: () -> void
    def clear_item_id_change: () -> void

    attr_accessor event(): String
    def event_changed?: () -> bool
    def event_change: () -> [ String?, String? ]
    def event_will_change!: () -> void
    def event_was: () -> String?
    def event_previously_changed?: () -> bool
    def event_previous_change: () -> Array[String?]?
    def event_previously_was: () -> String?
    def event_before_last_save: () -> String?
    def event_change_to_be_saved: () -> Array[String?]?
    def event_in_database: () -> String?
    def saved_change_to_event: () -> Array[String?]?
    def saved_change_to_event?: () -> bool
    def will_save_change_to_event?: () -> bool
    def restore_event!: () -> void
    def clear_event_change: () -> void

    attr_accessor whodunnit(): String?
    def whodunnit_changed?: () -> bool
    def whodunnit_change: () -> [ String?, String? ]
    def whodunnit_will_change!: () -> void
    def whodunnit_was: () -> String?
    def whodunnit_previously_changed?: () -> bool
    def whodunnit_previous_change: () -> Array[String?]?
    def whodunnit_previously_was: () -> String?
    def whodunnit_before_last_save: () -> String?
    def whodunnit_change_to_be_saved: () -> Array[String?]?
    def whodunnit_in_database: () -> String?
    def saved_change_to_whodunnit: () -> Array[String?]?
    def saved_change_to_whodunnit?: () -> bool
    def will_save_change_to_whodunnit?: () -> bool
    def restore_whodunnit!: () -> void
    def clear_whodunnit_change: () -> void

    attr_accessor object(): String?
    def object_changed?: () -> bool
    def object_change: () -> [ String?, String? ]
    def object_will_change!: () -> void
    def object_was: () -> String?
    def object_previously_changed?: () -> bool
    def object_previous_change: () -> Array[String?]?
    def object_previously_was: () -> String?
    def object_before_last_save: () -> String?
    def object_change_to_be_saved: () -> Array[String?]?
    def object_in_database: () -> String?
    def saved_change_to_object: () -> Array[String?]?
    def saved_change_to_object?: () -> bool
    def will_save_change_to_object?: () -> bool
    def restore_object!: () -> void
    def clear_object_change: () -> void

    attr_accessor created_at(): ActiveSupport::TimeWithZone?
    def created_at_changed?: () -> bool
    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
    def created_at_will_change!: () -> void
    def created_at_was: () -> ActiveSupport::TimeWithZone?
    def created_at_previously_changed?: () -> bool
    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
    def created_at_in_database: () -> ActiveSupport::TimeWithZone?
    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
    def saved_change_to_created_at?: () -> bool
    def will_save_change_to_created_at?: () -> bool
    def restore_created_at!: () -> void
    def clear_created_at_change: () -> void

    def item: () -> untyped
    def item=: (untyped?) -> untyped?
    def reload_item: () -> untyped?

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[PaperTrail::Version, Integer]
      include Enumerable[PaperTrail::Version]
    end

    class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[PaperTrail::Version, Integer]
    end
  end
end
